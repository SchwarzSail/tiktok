// Code generated by Kitex v0.9.0. DO NOT EDIT.

package interactionservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interaction "tiktok/kitex_gen/interaction"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Like": kitex.NewMethodInfo(
		likeHandler,
		newInteractionServiceLikeArgs,
		newInteractionServiceLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LikeList": kitex.NewMethodInfo(
		likeListHandler,
		newInteractionServiceLikeListArgs,
		newInteractionServiceLikeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentPublish": kitex.NewMethodInfo(
		commentPublishHandler,
		newInteractionServiceCommentPublishArgs,
		newInteractionServiceCommentPublishResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentList": kitex.NewMethodInfo(
		commentListHandler,
		newInteractionServiceCommentListArgs,
		newInteractionServiceCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteComment": kitex.NewMethodInfo(
		deleteCommentHandler,
		newInteractionServiceDeleteCommentArgs,
		newInteractionServiceDeleteCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoInfo": kitex.NewMethodInfo(
		getVideoInfoHandler,
		newInteractionServiceGetVideoInfoArgs,
		newInteractionServiceGetVideoInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactionServiceServiceInfo                = NewServiceInfo()
	interactionServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceLikeArgs)
	realResult := result.(*interaction.InteractionServiceLikeResult)
	success, err := handler.(interaction.InteractionService).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceLikeArgs() interface{} {
	return interaction.NewInteractionServiceLikeArgs()
}

func newInteractionServiceLikeResult() interface{} {
	return interaction.NewInteractionServiceLikeResult()
}

func likeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceLikeListArgs)
	realResult := result.(*interaction.InteractionServiceLikeListResult)
	success, err := handler.(interaction.InteractionService).LikeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceLikeListArgs() interface{} {
	return interaction.NewInteractionServiceLikeListArgs()
}

func newInteractionServiceLikeListResult() interface{} {
	return interaction.NewInteractionServiceLikeListResult()
}

func commentPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCommentPublishArgs)
	realResult := result.(*interaction.InteractionServiceCommentPublishResult)
	success, err := handler.(interaction.InteractionService).CommentPublish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCommentPublishArgs() interface{} {
	return interaction.NewInteractionServiceCommentPublishArgs()
}

func newInteractionServiceCommentPublishResult() interface{} {
	return interaction.NewInteractionServiceCommentPublishResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCommentListArgs)
	realResult := result.(*interaction.InteractionServiceCommentListResult)
	success, err := handler.(interaction.InteractionService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCommentListArgs() interface{} {
	return interaction.NewInteractionServiceCommentListArgs()
}

func newInteractionServiceCommentListResult() interface{} {
	return interaction.NewInteractionServiceCommentListResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceDeleteCommentArgs)
	realResult := result.(*interaction.InteractionServiceDeleteCommentResult)
	success, err := handler.(interaction.InteractionService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceDeleteCommentArgs() interface{} {
	return interaction.NewInteractionServiceDeleteCommentArgs()
}

func newInteractionServiceDeleteCommentResult() interface{} {
	return interaction.NewInteractionServiceDeleteCommentResult()
}

func getVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetVideoInfoArgs)
	realResult := result.(*interaction.InteractionServiceGetVideoInfoResult)
	success, err := handler.(interaction.InteractionService).GetVideoInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetVideoInfoArgs() interface{} {
	return interaction.NewInteractionServiceGetVideoInfoArgs()
}

func newInteractionServiceGetVideoInfoResult() interface{} {
	return interaction.NewInteractionServiceGetVideoInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, req *interaction.LikeRequest) (r *interaction.LikeResponse, err error) {
	var _args interaction.InteractionServiceLikeArgs
	_args.Req = req
	var _result interaction.InteractionServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeList(ctx context.Context, req *interaction.LikeListRequest) (r *interaction.LikeListResponse, err error) {
	var _args interaction.InteractionServiceLikeListArgs
	_args.Req = req
	var _result interaction.InteractionServiceLikeListResult
	if err = p.c.Call(ctx, "LikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentPublish(ctx context.Context, req *interaction.CommentPublishRequest) (r *interaction.CommentPublishResponse, err error) {
	var _args interaction.InteractionServiceCommentPublishArgs
	_args.Req = req
	var _result interaction.InteractionServiceCommentPublishResult
	if err = p.c.Call(ctx, "CommentPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *interaction.CommentListRequest) (r *interaction.CommentListResponse, err error) {
	var _args interaction.InteractionServiceCommentListArgs
	_args.Req = req
	var _result interaction.InteractionServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *interaction.DeleteCommentRequest) (r *interaction.DeleteCommentResponse, err error) {
	var _args interaction.InteractionServiceDeleteCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoInfo(ctx context.Context, req *interaction.GetVideoInfoRequest) (r *interaction.GetVideoInfoResponse, err error) {
	var _args interaction.InteractionServiceGetVideoInfoArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetVideoInfoResult
	if err = p.c.Call(ctx, "GetVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
