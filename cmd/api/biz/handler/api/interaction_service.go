// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/pkg/errors"
	"tiktok/cmd/api/biz/pack"
	"tiktok/cmd/api/biz/rpc"
	"tiktok/internal/errno"
	"tiktok/internal/utils"
	"tiktok/kitex_gen/interaction"

	"github.com/cloudwego/hertz/pkg/app"
	api "tiktok/cmd/api/biz/model/api"
)

// Like .
// @router tiktok/like/action [POST]
func Like(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LikeRequest
	//先对token进行拦截
	userInfo, err := pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//先判断参数,保证有一个存在
	if req.VideoID == nil && req.CommentID == nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	if req.VideoID == nil {
		req.VideoID = new(string)
		*req.VideoID = "0"
	}
	if req.CommentID == nil {
		req.CommentID = new(string)
		*req.CommentID = "0"
	}
	err = rpc.Like(ctx, &interaction.LikeRequest{
		UserId:     userInfo.ID,
		VideoId:    *req.VideoID,
		CommentId:  *req.CommentID,
		ActionType: req.ActionType,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// LikeList .
// @router tiktok/like/list [GET]
func LikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LikeListRequest
	//先对token进行拦截
	_, err = pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//判断一下参数
	if req.PageSize == nil {
		req.PageSize = new(int64)
		*req.PageSize = 10
	}
	if req.PageNum == nil {
		req.PageNum = new(int64)
		*req.PageNum = 0
	}

	resp := new(api.LikeListResponse)
	res, err := rpc.LikeList(ctx, &interaction.LikeListRequest{
		UserId:   req.UserID,
		PageNum:  *req.PageNum,
		PageSize: *req.PageSize,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	resp.Videos = pack.BuildVideoList(res)
	pack.RespList(c, resp, int64(len(resp.Videos)))
}

// CommentPublish .
// @router tiktok/comment/publish [POST]
func CommentPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentPublishRequest
	//先对token进行拦截
	userInfo, err := pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//先判断参数,保证有一个存在
	if req.VideoID == nil && req.CommentID == nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	if req.VideoID == nil {
		req.VideoID = new(string)
		*req.VideoID = "0"
	}
	if req.CommentID == nil {
		req.CommentID = new(string)
		*req.CommentID = "0"
	}
	err = rpc.CommentPublish(ctx, &interaction.CommentPublishRequest{
		VideoId:   *req.VideoID,
		CommentId: *req.CommentID,
		Content:   req.Content,
		UserId:    userInfo.ID,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// CommentList .
// @router tiktok/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentListRequest
	//先对token进行拦截
	_, err = pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//先判断参数,保证有一个存在
	if req.VideoID == nil && req.CommentID == nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	if req.VideoID == nil {
		req.VideoID = new(string)
		*req.VideoID = "0"
	}
	if req.CommentID == nil {
		req.CommentID = new(string)
		*req.CommentID = "0"
	}
	if req.PageSize == nil {
		req.PageSize = new(int64)
		*req.PageSize = 10
	}
	if req.PageNum == nil {
		req.PageNum = new(int64)
		*req.PageNum = 0
	}

	resp := new(api.CommentListResponse)
	comments, err := rpc.CommentList(ctx, &interaction.CommentListRequest{
		VideoId:   *req.VideoID,
		CommentId: *req.CommentID,
		PageNum:   *req.PageNum,
		PageSize:  *req.PageSize,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	resp.Comments = pack.BuildCommentList(comments)
	pack.RespList(c, resp, int64(len(comments)))
}

// DeleteComment .
// @router tiktok/comment/delete [DELETE]
func DeleteComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DeleteCommentRequest
	//先对token进行拦截
	_, err = pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//先判断参数,保证有一个存在
	if req.VideoID == nil && req.CommentID == nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	if req.VideoID == nil {
		req.VideoID = new(string)
		*req.VideoID = "0"
	}
	if req.CommentID == nil {
		req.CommentID = new(string)
		*req.CommentID = "0"
	}
	if err = rpc.DeleteComment(ctx, &interaction.DeleteCommentRequest{
		VideoId:   *req.VideoID,
		CommentId: *req.CommentID,
	}); err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}
